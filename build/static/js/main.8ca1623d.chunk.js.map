{"version":3,"sources":["part2-4/component/button.js","part2-4/component/details.js","part2-4/component/filter.js","part2-4/component/form.js","part2-4/component/message.js","part2-4/services/person.js","part2-4/phonebook.js","App.js","index.js"],"names":["Button","addPerson","type","onClick","Details","person","handleDelete","name","number","id","Filter","props","placeholder","onChange","handleSearch","value","search","Form","onSubmit","newPerson","handleNameChange","newNumber","handleNumberChange","Message","message","className","baseUrl","services","getAll","axios","get","create","personObj","post","update","put","deletePerson","delete","Phonebook","useState","persons","setPersons","setNewPerson","setNewNumber","setSearch","errorMessage","setErrorMessage","useEffect","then","response","data","catch","error","console","log","checkName","map","e","preventDefault","includes","window","confirm","i","length","setTimeout","concat","alert","filteredPerson","filter","toLowerCase","indexOf","newPersonList","target","index","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ca1623d.chunk.js","sourcesContent":["import React from 'react';\nconst Button = ({ addPerson }) => {\n    return (\n        <button type='submit' onClick={addPerson} >Submit</button>\n    )\n}\n\nexport default Button;","import React from 'react';\nconst Details = ({ person, handleDelete }) => {\n    //console.log(person);\n    return (\n        <div>\n            {person.name}: {person.number}\n            <button onClick={() => handleDelete(person.id, person.name)}>Delete</button>\n        </div>\n    )\n}\n\nexport default Details;","import React from 'react';\nconst Filter = (props) => {\n    return (\n        <div>\n            filter shown with <input placeholder='search...' onChange={props.handleSearch} value={props.search} />\n        </div>\n    )\n}\n\nexport default Filter;","import React from 'react';\n\nconst Form = (props) => {\n\n    return (\n        <form onSubmit={props.addPerson}>\n            <div>\n                name:  <input placeholder='name' value={props.newPerson} onChange={props.handleNameChange} />\n            </div>\n            <div>\n                number: <input placeholder='number' value={props.newNumber} onChange={props.handleNumberChange} />\n            </div>\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nconst Message = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <h4 className=\"error\">\n            {message}\n        </h4>\n    )\n}\n\nexport default Message;","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = personObj => {\n    return axios.post(baseUrl, personObj)\n}\n\nconst update = (id, personObj) => {\n    return axios.put(`${baseUrl}/${id}`, personObj)\n}\n\nconst deletePerson = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst services = {\n    getAll,\n    create,\n    update,\n    deletePerson\n}\n\nexport default services;","import React, { useState, useEffect } from 'react';\nimport Button from './component/button';\nimport Details from './component/details';\nimport Filter from './component/filter';\nimport Form from './component/form';\nimport Message from './component/message';\nimport services from './services/person'\n\nconst Phonebook = () => {\n    const [persons, setPersons] = useState([]);\n    const [newPerson, setNewPerson] = useState('');\n    const [newNumber, setNewNumber] = useState('');\n    const [search, setSearch] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const fetchPerson = () => {\n        services\n            .getAll()\n            .then(response => {\n                //console.log(response.data);\n                setPersons(response.data);\n            }).catch(error => {\n                console.log('Error', error);\n            })\n    }\n    useEffect(fetchPerson, []);\n\n    const checkName = persons.map(person => person.name);\n    //console.log(checkName);\n\n    //Stroing the value of name input field in newPeron\n    const handleNameChange = (e) => {\n        //console.log(e.target.value);\n        setNewPerson(e.target.value);\n    }\n\n    //Storing the value of number input filed in newNumber\n    const handleNumberChange = (e) => {\n        setNewNumber(e.target.value);\n        //console.log(e.target.value)\n    }\n\n    //Storing the value of searh input to search\n    const handleSearch = (e) => {\n        setSearch(e.target.value);\n    }\n\n    const addPerson = (e) => {\n        e.preventDefault();\n        //console.log(e.target);\n        const personObj = {\n            name: newPerson,\n            number: newNumber\n        }\n        if (!newPerson) {\n            alert('Name filed is empty');\n        } else if (!newNumber) {\n            alert('Number filed is empty');\n        } else {\n            if (checkName.includes(newPerson)) {\n                let confirm = window.confirm(`${newPerson} aleardy exits. Do you want to update phone number?`);\n                if (confirm) {\n                    let id = 0;\n                    for (let i = 0; i < persons.length; i++) {\n                        if (persons[i].name.includes(newPerson)) {\n                            id = persons[i].id;\n                        }\n                    }\n                    //console.log('ID', id);\n                    services\n                        .update(id, personObj)\n                        .then(response => {\n                            //console.log(response.data);\n                            setPersons(\n                                persons.map((person) =>\n                                    //checks for id: if found replaces that person with response.data\n                                    person.id !== id ? person : response.data\n                                )\n                            );\n                            //console(response.data);\n                            setNewPerson('');\n                            setNewNumber('');\n                        }).catch(error => {\n                            setErrorMessage(`${personObj.name} is already removed from Server!`);\n                        })\n                    setTimeout(() => {\n                        setErrorMessage(null);\n                    }, 3000)\n                }\n            } else {\n                services\n                    .create(personObj)\n                    .then(response => {\n                        //prints the person object used in post method\n                        //console.log(response.data);\n                        setPersons(persons.concat(response.data));\n                        setNewPerson('');\n                        setNewNumber('');\n                    })\n                    .catch(error => {\n                        setErrorMessage(error.response.data.error);\n                    })\n                setTimeout(() => {\n                    setErrorMessage(null);\n                }, 3000)\n            }\n        }\n    }\n\n    //filtering person list with the search value\n    const filteredPerson = persons.filter(person => {\n        return person.name.toLowerCase().indexOf(search.toLowerCase()) !== -1\n    })\n\n    const handleDelete = (id, name) => {\n        //console.log('Person', id, name);\n        let newPersonList = persons.filter(person => person.id !== id);\n        let confirm = window.confirm(`Pres OK to delete ${name}`);\n\n        if (confirm) {\n            services\n                .deletePerson(id)\n                .then(response => {\n                    //console.log(`${id} deleted`);\n                    setPersons(newPersonList);\n                })\n        }\n    }\n\n    return (\n        <div>\n            <h3>Phonebook</h3>\n            <Message message={errorMessage} />\n            <Filter search={search} handleSearch={handleSearch} />\n            <h3>Add new Perons</h3>\n            <Form\n                addPerson={addPerson} newPerson={newPerson} handleNameChange={handleNameChange}\n                handleNumberChange={handleNumberChange} newNumber={newNumber}\n            />\n            <Button addPerson={addPerson} />\n            <h3>Numbers</h3>\n            {filteredPerson.map((person, index) => {\n                return (\n                    <Details key={index} person={person} handleDelete={handleDelete} />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Phonebook;","import React from 'react';\nimport Phonebook from './part2-4/phonebook';\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n      </div>\n      <Phonebook />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}